c
response.parsed_response["response_url"]
response.parsed_response["response_text"]
response.parsed_response
c
response.parsed_response
response
c
@order.user.customer
@order.user
c
pp User.find(14)
pp Customer.find(@order.user_id)&.user_id
Customer.find(@order.user_id)&.user_id
@order.user_id
get_generic_customer_id
@order.user
@order.user_id
c
@order.customer
@order
c
@order.order_items.first.price
@order.order_items.first
@order.order_items
@order.order_items.count
@order.price
order_params
@order.errors.full_messages
@order.save
@order.order_items
@order
c
@order
c
params[:in_modal]
c
params[:in_modal]
params
c
@user.errors
c
format.to_s
format.to?s
format
c
format
c
format
c
self
user.customer
user.email
user
c
self.region
self.region_id
self.region
Region.default
c
!$global_settings[:multi_region]
c
!$global_settings[:multi_region]
c
!$global_settings[:multi_region]
c
$global_settings[:multi_region]
c
(seller_comission_percentage / 100 * 10000)/1.18
(seller_comission_percentage / 100 * 10000).to_s
seller_comission_percentage / 100 * 10000
seller_comission_percentage / 100
seller_comission_percentage.to_s
seller_comission_percentage
@order.total_price_cents
amount
sale_amount
seller_comission_percentage.to_s
seller_comission_percentage
seller_data
sale_amount
c
location
sales
c
location
sales
c
location
sales
c
location
sales
c
location
sales
c
sales
c
sales
c
location
c
sales
location
c
location
c
location.id
location
c
location.id
location
c
CommissionRange.find(params[:id]).location
CommissionRange.find(params[:id])
params[:id]
@comission_range
c
@location.errors
c
@location.errors
c
@location.errors
c
@location.errors
c
@default_object_options_array
c
@default_object_options_array
c
Region.default
Region.deault
self.region
c
qty_to_adjust = stock_to_adjust.stock_transfer.origin_warehouse_id == warehouse.id ? -stock_to_adjust.quantity : stock_to_adjust.quantity
qty_to_adjust.to_s
qty_to_adjust = stock_to_adjust.stock_transfer.origin_warehouse_id == warehouse.id ? stock_to_adjust.quantity : -stock_to_adjust.quantity
stock_to_adjust = stock_transfer_lines.find_by(product: inventory.product)
stock_to_adjust = stock_transfers_lines.find_by(product: inventory.product)
stock_transfer_lines = StockTransferLine.where(stock_transfer_id: stock_transfer_ids)
stock_to_adjust = stock_transfers.find_by(product: inventory.product)
inventory = warehouse.warehouse_inventories.first
stock_to_adjust = stock_transfers.find_by(product: inventory.product)
stock_transfers = StockTransfer.where(id: stock_transfer_ids)
stock_transfer_ids
c
user
warehouse
stock_transfer_ids
@periodic_inventory
c
ids
c
difference[:warehouse_id]
difference = differences.first
differences
c
@order_item.order_items
@order_item
@order
c
session[:current_warehouse_id]
c
session[:current_warehouse_id] = 2
@current_location&.warehouses&.first&.id
current_user&.warehouse_id
session[:current_warehouse_id]
c
movement[:warehouse_name]
movement["warehouse_name"]
movement[:custom_id]
movement["custom_id"]
movement[:type]
movement["type"]
movement["created_at"]
movement = @movements.first
movement ? @movements.first
@movements.first
@movements.count
@movements
c
movement_hash
c
@movements.third["created_at"]
@movements.third.created_at
@movements.third
c
@movements.third
@movements.second
@movements.first
@movements.count
@movements
c
movement.final_stock
movement
c
movement
movement(:final_stock)
current_stock
qty_in
qty_out
movement
current_stock.to_s
current_stock
c
current_stock += qty_in
qty_in = movement.quantity
current_stock += qty_in
current_stock
qty_in = movement.quantity.to_s
qty_in = movement.quantity
movement.is_a?(OrderItem)
movement
c
request.format
request.formar
format
c
@movements.third
@movements.second
@movements.first
@movements.count
@movements
orders
c
@product.orders
@product.stock_transfers
@product
c
filtered_transactable_params
@cashier_transaction.transactable
@cashier_transaction
filtered_transactable_params
@cashier_transaction.transactable
@cashier_transaction
c
filtered_transactable_params
@cashier_transaction.transactable
@cashier_transaction
c
@cashier_transaction
c
@cashier_shift.errors.full_messages
@cashier_shift.persisted?
@cashier_shift.errors
c
@cashier_shift.errors
@cashier_shift.save
@cashier_shift
c
CashierShift.last
@cashier_shift
c
CashierShift.last
@cashier_shift
