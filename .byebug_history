c
@elligible_locations
c
@elligible_locations
@elligible_locations.one?
c
@elligible_locations.one?
@elligible_locations
c
@user_attendance_log
existing_log = UserAttendanceLog.find_by(user: @user_attendance_log.user, location: @user_attendance_log.location, checkout: nil)
@user_attendance_log.location
@user_attendance_log.lcation
@user_attendance_log
c
rounded_value
c
rounded_value
c
rounded_value
c
rounded_value
c
rounded_value
c
rounded_value
c
rounded_value
c
rounded_value
c
rounded_value
c
rounded_value
c
rounded_value
c
tier
c
last_free_product = @user.user_free_products.available.find_by(product: product, loyalty_tier: loyalty_tier)
loyalty_tier = tier
product = product
last_free_product = @user.user_free_products.available.find_by(product: product, loyalty_tier: loyalty_tier)
@user
@user.
free_product_available?(product, tier)
product = Product.find_by(id: tier.free_product_id)
tier&.free_product_id
tier
c
@user.orders_in_last_12_months.count
@user
c
@user
c
user
@user
c
self.user
self
c
@order
c
@order.user_id
User.find(get_generic_customer_id)&.id
User.find_by!(email: "generic_customer@devtechperu.com")&.id
c
@order.user
c
@order.user
User.find(get_generic_customer_id)&.id
@order.user_id
@order
c
self.seller
self.user
self.customer
self.user
self
c
user
@user
c
@location.errors
c
value
c
value
c
value
c
value
c
value
c
value.class
value
c
@company_goals
c
@company_goals
c
@company_goals = {
          series: pie_chart_data.map { |data| data[:y] },
          labels: pie_chart_data.map { |data| data[:name] },
          colors: pie_chart_data.map { |data| data[:color] },
          total_sales: total_sales
        }
pie_chart_data = @commission_ranges.map.with_index do |range, index|
          max_value = range.max_sales || (range.min_sales * 2)  # For the last range without max_sales
          value = [ total_sales - range.min_sales, 0 ].max
          value = [ value, max_value - range.min_sales ].min
          {
            name: "#{range.min_sales} - #{range.max_sales || 'Infinity'}",
            y: value,
            color: generate_color(index)
          }
        end
@current_commission = CommissionRange.find_commission_for_sales(total_sales, @selected_location)
total_sales = filtered_orders.sum(:total_price_cents) / 100.0
@commission_ranges = CommissionRange.where(location_id: @selected_location.id).order(:min_sales)
@selected_location
c
@selected_location
@selected_location.present?
c
@selected_location_id
c
@selected_location_id
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
@selected_location
c
location_id
params
c
params
location_id
c
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
currency.symbol
value
c
Preorder.create(warehouse: warehouse, product: order_item.product, order: @order, quantity: product_to_update.stock.abs)
@order
order_item.product
warehouse
product_to_update.stock
product_to_update.stocl
product_to_update
c
@order.user_id
@order.seller_id
c
@requisition.errors
c
self.order_date
self
c
JSON.parse(invoice_data)['efact_client_token']
c
JSON.parse(invoice_data)['efact_client_token']
c
invoice_data
JSON.parse(invoice_data)['efact_client_token']
c
JSON.parse(invoice_data)['efact_client_token']
invoice_data
invoice_data.invoicer
c
invoice_data.invoicer
invoice_data
invoice_data_hash
invoice_date_hash
c
JSON.parse(invoice_data)["efact_client_token"]
JSON.parse(invoice_data)[:efact_client_token]
JSON.parse(invoice_data)
invoice_data.class
