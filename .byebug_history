c
@cashier_shift
@cashier_transaction.transactable.cashier_shift = @cashier_shift
@cashier_transaction.transactable.cashier_shift.cashier
@cashier_transaction.transactable
@cashier_transaction.transactable.cashier_shift = @cashier_transaction.cashier_shift
@cashier_transaction.transactable
@cashier_transaction.cashier_shift.cashier
@cashier_transaction.cashier_shift
@cashier_transaction
@cashier_transaction.
@cashier_transaction.transactable.cashier_shift
@cashier_transaction.transactable.cashier_shift.cashier
@cashier_transaction.transactable
@cashier_transaction.transactable.target_cashier_id = params[:transactable][:paid_to_id]
@cashier_transaction.transactable.description
@cashier_transaction.transactable.description += " - Transferencia a #{target_cashier.name}"
target_cashier
target_cashier_id = params[:transactable][:paid_to_id].to_s.gsub("cashier_", "").to_i
          target_cashier = Cashier.find_by(id: target_cashier_id)
params[:transactable][:paid_to_id]
$global_settings[:feature_flag_bank_cashiers_active] && params[:transactable][:paid_to_id].to_s.start_with?("cashier_")
@cashier_transaction.transactable_type
@cashier_transaction.currency = "PEN"
@cashier_transaction.cashier_shift.cashier
@cashier_transaction.cashier_shift
@cashier_transaction.cashier_shift = @cashier_shift
 @cashier_shift = if params[:cashier_shift_id].present?
      CashierShift.find(params[:cashier_shift_id])
    else
      @current_cashier_shift
    end
CashierShift.find(params[:cashier_shift_id]).cashier
CashierShift.find(params[:cashier_shift_id]).cahier
CashierShift.find(params[:cashier_shift_id])
params[:cashier_shift_id]
c
cash_outflow
cash_outflow.cashier_shift.cashier
cash_outflow.cashier_shift.cahier
cash_outflow.cashier_shift
ash_outflow.cashier_shift
target_shift = target_cashier.cashier_shifts.find_by(status: :open)
target_cashier = Cashier.find_by(id: target_cashier_id)
target_cashier_id = paid_to_id.to_s.gsub("cashier_", "").to_i
paid_to_id = target_cashier_id || cash_outflow.paid_to_id
target_cashier_id
cash_outflow.cashier
cash_outflow
c
cashier_shift.cashier
cashier_shift
transactable_type
c
guia_data[:serie]
guia_data["serie"]
guia_data
c
pp guia_data
pp guia_data.to_json
pp guia_data
c
linked_cashier_id = payment.payment_method
linked_cashier_id = payment.payment_method&.cashier_linked_id
$global_settings[:linked_cashiers_for_payment_methods]
CashierTransaction.last
payment.cashier_shift.cashier
payment
c
@current_cashier&.current_shift(current_user)
@current_cashier
@current_cashier_shift
c
payment.update_column(cashier_shift_id: @cashier_shift.id)
payment.update_columns(cashier_shift_id: @cashier_shift.id)
pp a
a.persisted?
c
payment.processor_transacion_id
payment.payment_method
payment.currency
payment.amount_cents
payment
@cashier_shift.cashier
@cashier_shift
c
stock_transfer_params
c
stock_transfer_params
c
stock_transfer_params
c
stock_transfer_params
c
stock_transfer_params
c
paid_to_id
is_cashier_transfer
paid_to_id
feature_enabled
c
pp @payment
@payment
account_receivable_payment.persisted?
account_receivable_payment
total_payments
c
pp @account_receivables.last.payment
pp @account_receivables.last.user
pp @account_receivables.last
pp @account_receivables
pp @unapplied_payments
c
Order.find(14).user
pp @payment.user
pp @payment
@payment
c
Warehouse.count
Warehouse.find_by(name: "Almac√©n Oficina Principal")
Warehouse.find_by(is_main: true)
@current_location
@current_location&.warehouses
current_user
session[:current_warehouse_id]
Warehouse.find_by(id: session[:current_warehouse_id])
c
quantity_to_add
c
quantity_to_add
c
movement.stock_transfer.is_adjustment?
c
movement.stock_transfer.is_adjustment?
movement.class.name
c
movement.class.name
movement
c
@stock_transfer.errors
@stock_transfer
c
warehouse_inventory
warehouse_inventory.persisted?
saved.persisted?
saved
c
stock_transfer.aasm.from_state == :in_transit
line.received_quantity != line.quantity
warehouse_inventory.save!
warehouse_inventory.stock += quantity_to_add
quantity_to_add = line.received_quantity || line.quantity
warehouse_inventory.stock ||= 0
warehouse_inventory = WarehouseInventory.find_or_initialize_by(warehouse_id: stock_transfer.destination_warehouse_id, product_id: line.product_id)
stock_transfer.destination_warehouse_id = Warehouse.find_by(is_main: true).id
stock_transfer.adjustment_type != "devolucion"
stock_transfer.is_adjustment?
stock_transfer
line
c
stock_transfers
stock_to_adjust
params
c
current_user.any_admin_or_supervisor?
@current_location
c
@order_data
@order_data["customer"]
@order_data[:customer]
@order_data["customer"]
@order_data["order"]
@order_data["customer"]
@order_data["order_items"]
 @order_data
c
@order.destroy
@order
c
voided_order.save!
voided_order.valid?
voided_order
c
order_data
VoidedOrder.create!(
          original_order_id: @order.id,
          original_order_custom_id: @order.custom_id,
          location_id: @order.location_id,
          user_id: @current_user.id,
          original_order_data: order_data,
          voided_at: Time.current,
          void_reason: @reason,
          invoice_list: invoice_list
        )
order_data.class
order_data
c
invoice_list = @order.invoices.where(sunat_status: "sunat_success").map { |invoice| invoice.custom_id }.join(", ")
invoice_list = invoices.where(sunat_status: "sunat_success").map { |invoice| invoice.custom_id }.join(", ")
invoice_list
@reason
 @order.location_id
@order.custom_id
@order.id
inventory.update!(stock: new_stock)
new_stock = inventory.stock + order_item.quantity
inventory = warehouse.warehouse_inventories.find_by(product_id: order_item.product_id)
order_item = @order.order_items.first
warehouse = @order.location.warehouses.first
@order
c
order_data
c
order_data
c
result
c
x
c
@date_range
c
@date_range
c
@date_range
c
@date_range
c
date_range
c
date_range
c
@orders.third
@orders.second
@orders.first
c
sales_data.third
sales_data.second
sales_data.first
c
sales_data.third
sales_data.second
sales_data.first
sales_data.size
sales.data.size
c
@orders.third
@orders.second
@orders.first
c
order_direction
order_column
@orders.second
@orders.first
request.format
c
@orders.third
@orders.second
@orders.first
@orders.size
sales_data
request.format
