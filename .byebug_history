c
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
value
c
formatted_value = number_to_currency(value,
        unit: currency.symbol,
        format: "%u %n",
        precision: 2,
        delimiter: ",",
        separator: "."
      )
currency.symbol
value
c
Preorder.create(warehouse: warehouse, product: order_item.product, order: @order, quantity: product_to_update.stock.abs)
@order
order_item.product
warehouse
product_to_update.stock
product_to_update.stocl
product_to_update
c
@order.user_id
@order.seller_id
c
@requisition.errors
c
self.order_date
self
c
JSON.parse(invoice_data)['efact_client_token']
c
JSON.parse(invoice_data)['efact_client_token']
c
invoice_data
JSON.parse(invoice_data)['efact_client_token']
c
JSON.parse(invoice_data)['efact_client_token']
invoice_data
invoice_data.invoicer
c
invoice_data.invoicer
invoice_data
invoice_data_hash
invoice_date_hash
c
JSON.parse(invoice_data)["efact_client_token"]
JSON.parse(invoice_data)[:efact_client_token]
JSON.parse(invoice_data)
invoice_data.class
invoice_data[:efact_client_token]
invoice_data["efact_client_token"]
invoice_data[:efact_client_token]
invoice_data
c
response.parsed_response["response_url"]
response.parsed_response["response_text"]
response.parsed_response
c
response.parsed_response
response
c
@order.user.customer
@order.user
c
pp User.find(14)
pp Customer.find(@order.user_id)&.user_id
Customer.find(@order.user_id)&.user_id
@order.user_id
get_generic_customer_id
@order.user
@order.user_id
c
@order.customer
@order
c
@order.order_items.first.price
@order.order_items.first
@order.order_items
@order.order_items.count
@order.price
order_params
@order.errors.full_messages
@order.save
@order.order_items
@order
c
@order
c
params[:in_modal]
c
params[:in_modal]
params
c
@user.errors
c
format.to_s
format.to?s
format
c
format
c
format
c
self
user.customer
user.email
user
c
self.region
self.region_id
self.region
Region.default
c
!$global_settings[:multi_region]
c
!$global_settings[:multi_region]
c
!$global_settings[:multi_region]
c
$global_settings[:multi_region]
c
(seller_comission_percentage / 100 * 10000)/1.18
(seller_comission_percentage / 100 * 10000).to_s
seller_comission_percentage / 100 * 10000
seller_comission_percentage / 100
seller_comission_percentage.to_s
seller_comission_percentage
@order.total_price_cents
amount
sale_amount
seller_comission_percentage.to_s
seller_comission_percentage
seller_data
sale_amount
c
location
sales
c
location
sales
c
location
sales
c
location
sales
c
location
sales
c
sales
c
sales
c
location
c
sales
location
c
location
c
location.id
location
c
location.id
location
c
CommissionRange.find(params[:id]).location
CommissionRange.find(params[:id])
params[:id]
@comission_range
c
@location.errors
c
@location.errors
c
@location.errors
c
@location.errors
c
@default_object_options_array
c
@default_object_options_array
c
Region.default
Region.deault
self.region
c
qty_to_adjust = stock_to_adjust.stock_transfer.origin_warehouse_id == warehouse.id ? -stock_to_adjust.quantity : stock_to_adjust.quantity
qty_to_adjust.to_s
qty_to_adjust = stock_to_adjust.stock_transfer.origin_warehouse_id == warehouse.id ? stock_to_adjust.quantity : -stock_to_adjust.quantity
stock_to_adjust = stock_transfer_lines.find_by(product: inventory.product)
stock_to_adjust = stock_transfers_lines.find_by(product: inventory.product)
stock_transfer_lines = StockTransferLine.where(stock_transfer_id: stock_transfer_ids)
stock_to_adjust = stock_transfers.find_by(product: inventory.product)
inventory = warehouse.warehouse_inventories.first
stock_to_adjust = stock_transfers.find_by(product: inventory.product)
stock_transfers = StockTransfer.where(id: stock_transfer_ids)
stock_transfer_ids
c
user
warehouse
stock_transfer_ids
@periodic_inventory
c
ids
c
difference[:warehouse_id]
difference = differences.first
differences
c
@order_item.order_items
@order_item
@order
c
session[:current_warehouse_id]
c
session[:current_warehouse_id] = 2
@current_location&.warehouses&.first&.id
current_user&.warehouse_id
