c
efectivo_payment_method = PaymentMethod.find_by(name: "Efectivo")
@order.payments
@order.payments.build(
              payment_method: efectivo_payment_method,
              amount_cents: @order.total_price_cents,
              currency: "PEN",
              payment_date: @order.order_date,
              status: "paid",
              cashier_shift: cashier_shift
            )
@order.payments
@order
c
@order
c
guia
guia.persisted?
guia.errors
c
envio_num_bultos
envio_peso_bruto_total
c
sale
guia_params
c
stock_transfer.save!
stock_transfer = StockTransfer.new(
          user_id: @order.user_id,
          origin_warehouse_id: origin_warehouse.id,
          destination_warehouse_id: nil, # No destination warehouse for client transfers
          customer_user_id: @order.user_id, # Set the customer as the destination
          transfer_date: Time.zone.now,
          comments: "Creado automáticamente desde la orden #{@order.custom_id}"
        )
origin_warehouse = @order.location.warehouses.first
@order.fast_stock_transfer_flag
c
pp account_receivable_payment
account_receivable_payment = AccountReceivablePayment.create!(
            account_receivable_id: account_receivable.id,
            payment_id: @payment.id,
            amount_cents: @payment.amount_cents,
            currency: @payment.currency,
            notes: @payment.comment
          )
pp @payment
@payment.update!(account_receivable: account_receivable)
amount_to_apply < payment_amount
amount_to_apply = [ payment_amount, receivable_remaining ].min
receivable_remaining = account_receivable.remaining_balance * 100
payment_amount = @payment.amount_cents
pp account_receivable = AccountReceivable.find(account_receivable_id)
account_receivable_id = session[:account_receivable_id]
session[:account_receivable_id]
session[:account_receivable_id].present?
pp @payment
@payment.status = "paid"
pp @payment = Payment.new(payment_params)
payment_params
c
pp @order.payments
c
account_receivable.present?
account_receivable = AccountReceivable.find_by(order: @order, payment: payment)
payment.payment_method == @credit_payment_method
pp payment = @order.payments.last
pp @order.payments
@order
c
(payment.created_at + default_due_date_days.days)
payment.due_date
account_receivable.present?
due_date.class
due_date
payment.update_column(
                  :amount_cents, payment.amount_cents,
                  :currency, payment.currency,
                  :due_date, due_date
                )
due_date = payment.due_date || (payment.created_at + default_due_date_days.days)
pp account_receivable = AccountReceivable.find_by(order: @order, payment: payment)
account_receivable = AccountReceivable.find_by(order: @order, payment: payment)
payment.payment_method == @credit_payment_method
payment = @order.payments.last
payment.payment_method == @credit_payment_method
payment = @order.payments.first
pp @order.payments
@order.payments
@order
default_due_date_days = $global_settings[:default_credit_receivable_due_date] || 30
c
operation == :create
@order.update_columns(payment_status: :partially_paid, is_credit_sale: true)
paid_amount > 0
paid_amount = non_credit_payments.sum(:amount_cents)
credit_payments.any?
pp non_credit_payments = payments.where.not(payment_method: @credit_payment_method)
pp credit_payments = payments.where(payment_method: @credit_payment_method)
pp payments = @order.payments
payments = @order.payments
default_due_date_days = $global_settings[:default_credit_receivable_due_date] || 30
@order.marked_for_destruction?
@order.destroyed?
c
@cashier_shift
@cashier_transaction.transactable.cashier_shift = @cashier_shift
@cashier_transaction.transactable.cashier_shift.cashier
@cashier_transaction.transactable
@cashier_transaction.transactable.cashier_shift = @cashier_transaction.cashier_shift
@cashier_transaction.transactable
@cashier_transaction.cashier_shift.cashier
@cashier_transaction.cashier_shift
@cashier_transaction
@cashier_transaction.
@cashier_transaction.transactable.cashier_shift
@cashier_transaction.transactable.cashier_shift.cashier
@cashier_transaction.transactable
@cashier_transaction.transactable.target_cashier_id = params[:transactable][:paid_to_id]
@cashier_transaction.transactable.description
@cashier_transaction.transactable.description += " - Transferencia a #{target_cashier.name}"
target_cashier
target_cashier_id = params[:transactable][:paid_to_id].to_s.gsub("cashier_", "").to_i
          target_cashier = Cashier.find_by(id: target_cashier_id)
params[:transactable][:paid_to_id]
$global_settings[:feature_flag_bank_cashiers_active] && params[:transactable][:paid_to_id].to_s.start_with?("cashier_")
@cashier_transaction.transactable_type
@cashier_transaction.currency = "PEN"
@cashier_transaction.cashier_shift.cashier
@cashier_transaction.cashier_shift
@cashier_transaction.cashier_shift = @cashier_shift
 @cashier_shift = if params[:cashier_shift_id].present?
      CashierShift.find(params[:cashier_shift_id])
    else
      @current_cashier_shift
    end
CashierShift.find(params[:cashier_shift_id]).cashier
CashierShift.find(params[:cashier_shift_id]).cahier
CashierShift.find(params[:cashier_shift_id])
params[:cashier_shift_id]
c
cash_outflow
cash_outflow.cashier_shift.cashier
cash_outflow.cashier_shift.cahier
cash_outflow.cashier_shift
ash_outflow.cashier_shift
target_shift = target_cashier.cashier_shifts.find_by(status: :open)
target_cashier = Cashier.find_by(id: target_cashier_id)
target_cashier_id = paid_to_id.to_s.gsub("cashier_", "").to_i
paid_to_id = target_cashier_id || cash_outflow.paid_to_id
target_cashier_id
cash_outflow.cashier
cash_outflow
c
cashier_shift.cashier
cashier_shift
transactable_type
c
guia_data[:serie]
guia_data["serie"]
guia_data
c
pp guia_data
pp guia_data.to_json
pp guia_data
c
linked_cashier_id = payment.payment_method
linked_cashier_id = payment.payment_method&.cashier_linked_id
$global_settings[:linked_cashiers_for_payment_methods]
CashierTransaction.last
payment.cashier_shift.cashier
payment
c
@current_cashier&.current_shift(current_user)
@current_cashier
@current_cashier_shift
c
payment.update_column(cashier_shift_id: @cashier_shift.id)
payment.update_columns(cashier_shift_id: @cashier_shift.id)
pp a
a.persisted?
c
payment.processor_transacion_id
payment.payment_method
payment.currency
payment.amount_cents
payment
@cashier_shift.cashier
@cashier_shift
c
stock_transfer_params
c
stock_transfer_params
c
stock_transfer_params
c
stock_transfer_params
c
stock_transfer_params
c
paid_to_id
is_cashier_transfer
paid_to_id
feature_enabled
c
pp @payment
@payment
account_receivable_payment.persisted?
account_receivable_payment
total_payments
c
pp @account_receivables.last.payment
pp @account_receivables.last.user
pp @account_receivables.last
pp @account_receivables
pp @unapplied_payments
c
Order.find(14).user
pp @payment.user
pp @payment
@payment
c
Warehouse.count
Warehouse.find_by(name: "Almacén Oficina Principal")
Warehouse.find_by(is_main: true)
@current_location
@current_location&.warehouses
current_user
session[:current_warehouse_id]
Warehouse.find_by(id: session[:current_warehouse_id])
c
quantity_to_add
c
quantity_to_add
c
movement.stock_transfer.is_adjustment?
c
movement.stock_transfer.is_adjustment?
movement.class.name
c
movement.class.name
movement
c
@stock_transfer.errors
@stock_transfer
c
warehouse_inventory
warehouse_inventory.persisted?
saved.persisted?
saved
c
stock_transfer.aasm.from_state == :in_transit
line.received_quantity != line.quantity
warehouse_inventory.save!
warehouse_inventory.stock += quantity_to_add
quantity_to_add = line.received_quantity || line.quantity
warehouse_inventory.stock ||= 0
warehouse_inventory = WarehouseInventory.find_or_initialize_by(warehouse_id: stock_transfer.destination_warehouse_id, product_id: line.product_id)
stock_transfer.destination_warehouse_id = Warehouse.find_by(is_main: true).id
stock_transfer.adjustment_type != "devolucion"
stock_transfer.is_adjustment?
stock_transfer
line
