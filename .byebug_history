c
x
c
@date_range
c
@date_range
c
@date_range
c
@date_range
c
date_range
c
date_range
c
@orders.third
@orders.second
@orders.first
c
sales_data.third
sales_data.second
sales_data.first
c
sales_data.third
sales_data.second
sales_data.first
sales_data.size
sales.data.size
c
@orders.third
@orders.second
@orders.first
c
order_direction
order_column
@orders.second
@orders.first
request.format
c
@orders.third
@orders.second
@orders.first
@orders.size
sales_data
request.format
c
sales_data.second
sales_data.first
direction
order_sql
c
sales_data.fourth
sales_data.third
sales_data.second
sales_data.first
sales_data.size
sales_data
order_direction
order_column
request.format
c
request.format
sales_data.first
c
sales_data.fourth
sales_data.third
sales_data.second
sales_data.first
sales_data.size
order_sql
direction
c
@orders[2]
@orders[1]
@orders[0]
@orders.first
@orders.size
request.format
format
order_direction
order_column
c
order_direction
order_column
@date_range
@current_location
@orders.class
@orders.size
@orders
c
records.third
records.second
records.first
c
records.third
records.second
records.first
records.size
c
records.class
records.third
records.second
records.first
records.size
records
c
response = format_for_datatable(@orders)
@orders
c
Order.count
format_for_datatable(@orders)
@orders
format_for_datatable(@orders)
c
@orders.first
@orders.size
@orders
c
base_query.select([
      "orders.id",
      "locations.name as location_name",
      "orders.custom_id as order_custom_id",
      "orders.created_at as order_datetime",
      "CONCAT(users.first_name, ' ', users.last_name) as customer_name",
      "orders.total_price_cents as order_total",
      "payment_methods.description as payment_method",
      "payments.amount_cents as payment_total",
      "payments.processor_transacion_id as payment_tx",
      "COALESCE(invoices.custom_id, external_invoices.custom_id) as invoice_custom_id"
    ].join(", ")).first
base_query.select([
      "orders.id",
      "locations.name as location_name",
      "orders.custom_id as order_custom_id",
      "orders.created_at as order_datetime",
      "CONCAT(users.first_name, ' ', users.last_name) as customer_name",
      "orders.total_price_cents as order_total",
      "payment_methods.description as payment_method",
      "payments.amount_cents as payment_total",
      "payments.processor_transacion_id as payment_tx",
      "COALESCE(invoices.custom_id, external_invoices.custom_id) as invoice_custom_id"
    ].join(", ")).size
base_query.select([
      "orders.id",
      "locations.name as location_name",
      "orders.custom_id as order_custom_id",
      "orders.created_at as order_datetime",
      "CONCAT(users.first_name, ' ', users.last_name) as customer_name",
      "orders.total_price_cents as order_total",
      "payment_methods.description as payment_method",
      "payments.amount_cents as payment_total",
      "payments.processor_transacion_id as payment_tx",
      "COALESCE(invoices.custom_id, external_invoices.custom_id) as invoice_custom_id"
    ].join(", "))
base_query.first
base_query.size
 base_query = base_query.where(created_at: date_range) if date_range
base_query = base_query.where(location: location) if location
base_query.first
base_query.size
base_query = Order.select("orders.*")
                   .joins(:location, :user)
                   .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
                   .joins("LEFT JOIN payment_methods ON payment_methods.id = payments.payment_method_id")
                   .joins("LEFT JOIN invoices ON invoices.order_id = orders.id")
                   .joins("LEFT JOIN external_invoices ON external_invoices.order_id = orders.id")
c
base_query.first
base_query.size
base_query.class
base_query = includes(:location, :user)
      .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
      .joins("LEFT JOIN payment_methods ON payment_methods.id = payments.payment_method_id")
      .joins("LEFT JOIN invoices ON invoices.order_id = orders.id")
      .joins("LEFT JOIN external_invoices ON external_invoices.order_id = orders.id")
c
base_query = includes(:location, :user)
      .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
      .joins("LEFT JOIN payment_methods ON payment_methods.id = payments.payment_method_id")
      .joins("LEFT JOIN invoices ON invoices.order_id = orders.id")
      .joins("LEFT JOIN external_invoices ON external_invoices.order_id = orders.id")
      .select(consolidated_sales_fields)
base_query = includes(:location, :user)
      .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
      .joins("LEFT JOIN payment_methods ON payment_methods.id = payments.payment_method_id")
      .joins("LEFT JOIN invoices ON invoices.order_id = orders.id")
      .joins("LEFT JOIN external_invoices ON external_invoices.order_id = orders.id")
base_query = includes(:location, :user)
      .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
      .joins("LEFT JOIN payment_methods ON payment_methods.id = payments.payment_method_id")
      .joins("LEFT JOIN invoices ON invoices.order_id = orders.id")
base_query = includes(:location, :user)
      .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
      .joins("LEFT JOIN payment_methods ON payment_methods.id = payments.payment_method_id")
base_query = includes(:location, :user)
      .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
base_query = includes(:location, :user)
      .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
      .joins("LEFT JOIN payment_methods ON payment_methods.id = payments.payment_method_id")
      .joins("LEFT JOIN invoices ON invoices.order_id = orders.id")
      .joins("LEFT JOIN external_invoices ON external_invoices.order_id = orders.id")
      .select(consolidated_sales_fields)
base_query
date_range
location
c
@orders = Order.consolidated_sales(
      location: @current_location,
      date_range: @date_range
    )
@current_location
@date_range
@to_date
@from_date 
params
params.fetch(:filter, {})
filter_params
c
user.email
user
customer
user
c
@cashier_transaction.errors
a.persisted?
a.errors
a = @cashier_transaction.save
@cashier_transaction
 @current_cashier_shift
c
params
c
params
c
payment[:payment_method_id]&.to_i
credit_payment_method.id
payment[:payment_method_id]
payment = order_params[:payments_attributes].first
order_params[:payments_attributes]
c
paid_amount = non_credit_payments.sum(:amount_cents)
non_credit_payments = payments.where.not(payment_method: credit_payment_method)
credit_payments = payments.where(payment_method: credit_payment_method)
non_credit_payments.sum(:amount_cents)
non_credit_payments
paid_amount = non_credit_payments.sum(:amount_cents)
credit_payments.any?
 non_credit_payments = payments - credit_payments
credit_payments = payments.where(payment_method: credit_payment_method)
credit_payment_method = PaymentMethod.find_by(name: "credit")
payments
c
non_credit_payments = payments - credit_payments
credit_payments = payments.where(payment_method: credit_payment_method)
credit_payment_method = PaymentMethod.find_by(name: "credit")
payment_amount >= @order.total_price_cents
