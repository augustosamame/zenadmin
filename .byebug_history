c
movement.stock_transfer.is_adjustment?
c
movement.stock_transfer.is_adjustment?
movement.class.name
c
movement.class.name
movement
c
@stock_transfer.errors
@stock_transfer
c
warehouse_inventory
warehouse_inventory.persisted?
saved.persisted?
saved
c
stock_transfer.aasm.from_state == :in_transit
line.received_quantity != line.quantity
warehouse_inventory.save!
warehouse_inventory.stock += quantity_to_add
quantity_to_add = line.received_quantity || line.quantity
warehouse_inventory.stock ||= 0
warehouse_inventory = WarehouseInventory.find_or_initialize_by(warehouse_id: stock_transfer.destination_warehouse_id, product_id: line.product_id)
stock_transfer.destination_warehouse_id = Warehouse.find_by(is_main: true).id
stock_transfer.adjustment_type != "devolucion"
stock_transfer.is_adjustment?
stock_transfer
line
c
stock_transfers
stock_to_adjust
params
c
current_user.any_admin_or_supervisor?
@current_location
c
@order_data
@order_data["customer"]
@order_data[:customer]
@order_data["customer"]
@order_data["order"]
@order_data["customer"]
@order_data["order_items"]
 @order_data
c
@order.destroy
@order
c
voided_order.save!
voided_order.valid?
voided_order
c
order_data
VoidedOrder.create!(
          original_order_id: @order.id,
          original_order_custom_id: @order.custom_id,
          location_id: @order.location_id,
          user_id: @current_user.id,
          original_order_data: order_data,
          voided_at: Time.current,
          void_reason: @reason,
          invoice_list: invoice_list
        )
order_data.class
order_data
c
invoice_list = @order.invoices.where(sunat_status: "sunat_success").map { |invoice| invoice.custom_id }.join(", ")
invoice_list = invoices.where(sunat_status: "sunat_success").map { |invoice| invoice.custom_id }.join(", ")
invoice_list
@reason
 @order.location_id
@order.custom_id
@order.id
inventory.update!(stock: new_stock)
new_stock = inventory.stock + order_item.quantity
inventory = warehouse.warehouse_inventories.find_by(product_id: order_item.product_id)
order_item = @order.order_items.first
warehouse = @order.location.warehouses.first
@order
c
order_data
c
order_data
c
result
c
x
c
@date_range
c
@date_range
c
@date_range
c
@date_range
c
date_range
c
date_range
c
@orders.third
@orders.second
@orders.first
c
sales_data.third
sales_data.second
sales_data.first
c
sales_data.third
sales_data.second
sales_data.first
sales_data.size
sales.data.size
c
@orders.third
@orders.second
@orders.first
c
order_direction
order_column
@orders.second
@orders.first
request.format
c
@orders.third
@orders.second
@orders.first
@orders.size
sales_data
request.format
c
sales_data.second
sales_data.first
direction
order_sql
c
sales_data.fourth
sales_data.third
sales_data.second
sales_data.first
sales_data.size
sales_data
order_direction
order_column
request.format
c
request.format
sales_data.first
c
sales_data.fourth
sales_data.third
sales_data.second
sales_data.first
sales_data.size
order_sql
direction
c
@orders[2]
@orders[1]
@orders[0]
@orders.first
@orders.size
request.format
format
order_direction
order_column
c
order_direction
order_column
@date_range
@current_location
@orders.class
@orders.size
@orders
c
records.third
records.second
records.first
c
records.third
records.second
records.first
records.size
c
records.class
records.third
records.second
records.first
records.size
records
c
response = format_for_datatable(@orders)
@orders
c
Order.count
format_for_datatable(@orders)
@orders
format_for_datatable(@orders)
c
@orders.first
@orders.size
@orders
c
base_query.select([
      "orders.id",
      "locations.name as location_name",
      "orders.custom_id as order_custom_id",
      "orders.created_at as order_datetime",
      "CONCAT(users.first_name, ' ', users.last_name) as customer_name",
      "orders.total_price_cents as order_total",
      "payment_methods.description as payment_method",
      "payments.amount_cents as payment_total",
      "payments.processor_transacion_id as payment_tx",
      "COALESCE(invoices.custom_id, external_invoices.custom_id) as invoice_custom_id"
    ].join(", ")).first
base_query.select([
      "orders.id",
      "locations.name as location_name",
      "orders.custom_id as order_custom_id",
      "orders.created_at as order_datetime",
      "CONCAT(users.first_name, ' ', users.last_name) as customer_name",
      "orders.total_price_cents as order_total",
      "payment_methods.description as payment_method",
      "payments.amount_cents as payment_total",
      "payments.processor_transacion_id as payment_tx",
      "COALESCE(invoices.custom_id, external_invoices.custom_id) as invoice_custom_id"
    ].join(", ")).size
base_query.select([
      "orders.id",
      "locations.name as location_name",
      "orders.custom_id as order_custom_id",
      "orders.created_at as order_datetime",
      "CONCAT(users.first_name, ' ', users.last_name) as customer_name",
      "orders.total_price_cents as order_total",
      "payment_methods.description as payment_method",
      "payments.amount_cents as payment_total",
      "payments.processor_transacion_id as payment_tx",
      "COALESCE(invoices.custom_id, external_invoices.custom_id) as invoice_custom_id"
    ].join(", "))
base_query.first
base_query.size
 base_query = base_query.where(created_at: date_range) if date_range
base_query = base_query.where(location: location) if location
base_query.first
base_query.size
base_query = Order.select("orders.*")
                   .joins(:location, :user)
                   .joins("LEFT JOIN payments ON payments.payable_id = orders.id AND payments.payable_type = 'Order'")
                   .joins("LEFT JOIN payment_methods ON payment_methods.id = payments.payment_method_id")
                   .joins("LEFT JOIN invoices ON invoices.order_id = orders.id")
                   .joins("LEFT JOIN external_invoices ON external_invoices.order_id = orders.id")
c
base_query.first
base_query.size
base_query.class
